// Для каждого элемента\блока должно быть своё правило
// Иначе получается не читабельно
// scss saas для разработчика, в продакшен идет голый css
// без коментов и пустых класов
// @import url(https://cdnjs.cloudflare.com/ajax/libs/modern-normalize/2.0.0/modern-normalize.min.css);;
//-----------------------------------------------------------------------------------------------------------------------------------

@import 'utils/variables';
@import 'base/reset';
@import 'utils/hidden';
@import 'utils/placeholders';
@import 'utils/mixins';
@import 'base/common';

@import 'components/container';
@import 'components/btn';
@import 'components/pretitle';
@import 'components/aftertitle';
@import 'components/logo';
@import 'components/hero';
@import 'components/modal-window';

@import 'layout/page-header';
@import 'layout/hero';
@import 'layout/about';


// Добавил папку layout и файлы для бифор и афтер тайтл-ов



















.page {
    color: var(--primary-text-color);
    background-color: var(--primary-bg-color);
    font-family: Roboto, sans-serif;
  }
  .uppercase {
    text-transform: uppercase;
  }

  /* еще вариант, который можете встретить
.visually-hidden {
  position: absolute !important;
  clip: rect(1px 1px 1px 1px);
  clip: rect(1px, 1px, 1px, 1px);
  padding: 0 !important;
  border: 0 !important;
  height: 1px !important;
  width: 1px !important;
  overflow: hidden;
} */

.visually-hidden {
    position: absolute;
    width: 1px;
    height: 1px;
    margin: -1px;
    border: 0;
    padding: 0;
    white-space: nowrap;
    clip-path: inset(100%);
    clip: rect(0 0 0 0);
    overflow: hidden;
  }

//-----------------------------------------------------------------------------------------------------------------------------------
// Препроцессор это 99% usecase-ов
// 1. Переменные
// 2. Вложенность
// 3. Конкатенация
// 4. Миксины
// 5. Разбиение по файлам
// Не используется ни vanilla JS, ни vanilla html, ни vanilla css - это все на обвертках, сборщиках, компиляторах и магии.


//-----------------------------------------------------------------------------------------------------------------------------------
// @extend .nnn - добавляет правила из набора .nnn

// .notification {
//     background-color: #ccc;
//     font-style: 20px;
//     padding: 20px;
// }

// .notification-error {
//     @extend .notification;
//     background-color: red;
// }

// .notification-succes {
//     @extend .notification;
//     background-color: green;
// }

//---------------------------------------------------------------------------------------------------------------------------------
// @each позволяет повторять блоки кода для каждого элемента в списке или карты

// $icons: 'facebook', 'github', 'linkedin', 'twitter';

// @each $iconName in $icons {
//     .icon-#{$iconName} { // #{$nnn} интерполяция - извлечение значения переменной
//         background-image: url('../images/svg/footer-social/#{$iconName}.svg');
//     }
// }

// В разных местах может быть разное кол-во иконок и свойств, @mixin поможет



// $icons: 'facebook', 'github', 'linkedin', 'twitter'; // Для каждой из этих строк

// @mixin generateIcons($iconList) {
//     @each $iconName in $icons {                     // Для каждого элемента этого списка создаёт селектор - svg на бекграунде
//         .icon-#{$iconName} { // #{$nnn} интерполяция - извлечение значения переменной
//             background-image: url('../images/svg/footer-social/#{$iconName}.svg');
//         }
//     }
// }

// @include generateIcons($icons);